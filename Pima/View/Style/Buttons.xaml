<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Pima.View.Style"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">
    
    <ControlTemplate x:Key="Button1" TargetType="{x:Type Button}">
        <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" MinHeight="48" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
            <materialDesign:Ripple.Feedback>
                <TemplateBinding Property="Foreground">
                    <TemplateBinding.Converter>
                        <materialDesign:BrushRoundConverter HighValue="White" LowValue="Black"/>
                    </TemplateBinding.Converter>
                </TemplateBinding>
            </materialDesign:Ripple.Feedback>
        </materialDesign:Ripple>
    </ControlTemplate>


    <ControlTemplate x:Key="ButtonMenu" TargetType="{x:Type Button}">
        <ContentPresenter/>
    </ControlTemplate>
    <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}"/>
        <Style.BasedOn>
            <Style TargetType="{x:Type ToggleButton}">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignToolBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}"/>
                <Setter Property="Width" Value="40"/>
                <Setter Property="Height" Value="40"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid ClipToBounds="True" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal"/>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                        <LinearDoubleKeyFrame KeyTime="0" Value="0"/>
                                                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                        <LinearDoubleKeyFrame KeyTime="0" Value="0"/>
                                                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                        <LinearDoubleKeyFrame KeyTime="0" Value="1"/>
                                                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                        <LinearDoubleKeyFrame KeyTime="0" Value="1"/>
                                                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale"/>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale"/>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Ellipse x:Name="HoverEllipse" Fill="Transparent" Stroke="Transparent" StrokeThickness="1"/>
                                <Ellipse x:Name="CheckedEllipse" Fill="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleY="1" ScaleX="1"/>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="HoverEllipse" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>

</ResourceDictionary>